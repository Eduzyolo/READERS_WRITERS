semaphore mutex = 1;                 // Controls access to the reader count
semaphore db = 1;                    // Controls access to the database
int reader_count;                    // The number of reading processes accessing the data

Reader()
{
  while (TRUE) {                     // loop forever
     down(&mutex);                          // gain access to reader_count
     reader_count = reader_count + 1;       // increment the reader_count
     if (reader_count == 1)
         down(&db);                         // if this is the first process to read the database,
                                            // a down on db is executed to prevent access to the 
                                            // database by a writing process
     up(&mutex);                            // allow other processes to access reader_count
     read_db();                             // read the database
     down(&mutex);                          // gain access to reader_count
     reader_count = reader_count - 1;       // decrement reader_count
     if (reader_count == 0)
         up(&db);                           // if there are no more processes reading from the 
                                            // database, allow writing process to access the data
     up(&mutex);                            // allow other processes to access reader_countuse_data();
                                            // use the data read from the database (non-critical)
}

Writer()
{
  while (TRUE) {                     // loop forever
     create_data();                         // create data to enter into database (non-critical)
     down(&db);                             // gain access to the database
     write_db();                            // write information to the database
     up(&db);                               // release exclusive access to the database
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>

sem_t mutex,writeblock;
int data = 0,rcount = 0;

void *reader(void *arg)
{
  int f;
  f = ((int)arg);
  sem_wait(&mutex);
  rcount = rcount + 1;
  if(rcount==1)
   sem_wait(&writeblock);
  sem_post(&mutex);
  printf("Data read by the reader%d is %d\n",f,data);
  sleep(1);
  sem_wait(&mutex);
  rcount = rcount - 1;
  if(rcount==0)
   sem_post(&writeblock);
  sem_post(&mutex);
}

void *writer(void *arg)
{
  int f;
  f = ((int) arg);
  sem_wait(&writeblock);
  data++;
  printf("Data writen by the writer%d is %d\n",f,data);
  sleep(1);
  sem_post(&writeblock);
}

int main()
{
  int i,b; 
  pthread_t rtid[5],wtid[5];
  sem_init(&mutex,0,1);
  sem_init(&writeblock,0,1);
  for(i=0;i<=2;i++)
  {
    pthread_create(&wtid[i],NULL,writer,(void *)i);
    pthread_create(&rtid[i],NULL,reader,(void *)i);
  }
  for(i=0;i<=2;i++)
  {
    pthread_join(wtid[i],NULL);
    pthread_join(rtid[i],NULL);
  }
  return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////


class Program
    {
        const int MaxValues = 25;
        static int[] _array = new int[MaxValues];
        static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim();
        static void Main(string[] args)
        {
            ThreadPool.QueueUserWorkItem(WriteThread);
            for (int i = 0; i < 3; i++)
            {
                ThreadPool.QueueUserWorkItem(ReadThread);
            }
            Console.ReadKey();
        }
        static void WriteThread(object state)
        {
            int id = Thread.CurrentThread.ManagedThreadId;
            for (int i = 0; i < MaxValues; ++i)
            {
                _lock.EnterWriteLock();
                Console.WriteLine("Entered WriteLock on thread {0}", id);
                _array[i] = i * i;
                Console.WriteLine("Added {0} to array on thread {1}", _array[i], id);
                Console.WriteLine("Exiting WriteLock on thread {0}", id);
                _lock.ExitWriteLock();
                Thread.Sleep(1000);
            }
        }
        static void ReadThread(object state)
        {
            int id = Thread.CurrentThread.ManagedThreadId;
            for (int i = 0; i < MaxValues; ++i)
            {
                _lock.EnterReadLock();
                Console.WriteLine("Entered ReadLock on thread {0}", id);
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < i; j++)
                {
                    if (sb.Length > 0) sb.Append(", ");
                    sb.Append(_array[j]);
                }
                Console.WriteLine("Array: {0} on thread {1}", sb, id);
                Console.WriteLine("Exiting ReadLock on thread {0}", id);
                _lock.ExitReadLock();
                Thread.Sleep(1000);
            }
        }
    }